What happens when you initialize a repository? Why do you need to do it?
-making a repository starts tracking the version editing history of all the files in that repository
-this is useful for debugging and to look at old changes you made in the files

How is the staging area different from the working directory and the repository? What value do you think it offers?
-allows you to choose which files you want to commit
-you can commit the files you want without having to commit every file
-this allows you to make commits of only logical changes that go together

How can you use the staging area to make sure you have one commit per logical change?
-the staging area lets you only commit certain files at a time
-this allows you to commit different files at different times

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-trying out a new feature
-trying to restructure your code
-making different versions of the same program

How do the diagrams help you visualize the branch structure?
-show how branches are interrelated
-show where branches split from each other
-show reachable/unreachable commits

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
-merges changes made in the two branches into a single branch
-this way we can have one version of the code when we have finalized features

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
-pros: automatic merges are easier for the user
-cons: git might not always know which lines to change with automatic merge (leading to conflicts)